program superusers_karamja_fisher;

{**
 * Copyright (c) SuperUser.
 *
 * Use as you wish, but credit where it's due.
 *}

{$define SMART}
{$define _DEBUG_SURFACES}

{$i srl-6/srl.simba}
{$i srl-6/lib/misc/srlplayerform.simba}
{$i sps/lib/sps-rs3.simba}

const
  VERSION = '1.0.6';

type
  TStatisticsResource = record
    name: string;
    amount: integer;
    amount_patch: integer;
    dtm: integer;
    xp: extended;
  end

  TStatistics = record
    canvas: TMufasaBitmap;
    canvas_location: TPoint;
    bounds: TBox;
    resources: array of TStatisticsResource;
    xp: integer;
  end

  TSurfacePartFilterFunc = function (
    const atpa: T2DPointArray;
    const p_: TPoint;
    out index: integer
  ): TPoint;

  TSurfacePart = record
    bounds,
    size: TBox;
    color_settings: TColorSettings;
    color_tolerance,
    color,
    step,
    max_distance,
    min_pixel_count: integer;
    anti: boolean;
    p: TPoint;
    base_atpa: T2DPointArray;
  end

  TSurfacePartArray = array of ^TSurfacePart;

  TSurfaceObject = record
    name: string;
    parts: TSurfacePartArray;
    bounds: TBox;
    hits: TBoxArray;
    filter: TSurfacePartFilterFunc;
  end

  TSurfaceObjectArray = array of ^TSurfaceObject;

var
  karamja: TSPSArea;
  walking_paths: T2DPointArray;
  __surface_objects: TSurfaceObjectArray;
  fish_str: string;
  statistics: TStatistics;

function TStatisticsResource.GetXp(): extended
begin
  result := (self.amount + self.amount_patch) * self.xp;
end

function TStatisticsResource.GetTotal(): integer
begin
  result := self.amount + self.amount_patch;
end

procedure TStatisticsResource.UpdatePatch()
begin
  if self.dtm > -1 then
    self.amount_patch := tabBackpack.CountDTM(self.dtm);
end

procedure TStatistics.UpdatePatch()
var
  i: integer;
begin
  for i := 0 to High(self.resources) do
    self.resources[i].UpdatePatch();
end

function TStatistics.GetXp(): extended
var
  i: integer;
begin
  for i := 0 to High(self.resources) do
    result := result + self.resources[i].GetXp();
end

function TStatistics.GetTotalResources(): integer
var
  i: integer;
begin
  for i := 0 to High(self.resources) do
    IncEx(result, self.resources[i].GetTotal());
end

procedure TStatistics.AddResource(
  const _name: string;
  _xp: extended = 0;
  _dtm: integer = -1
)
begin
  SetLength(self.resources, Length(self.resources) + 1);

  with self.resources[High(self.resources)] do begin
    xp := _xp;
    dtm := _dtm;
    name := _name;
  end
end

procedure TStatistics.Commit()
var
  i: integer;
begin
  for i := 0 to High(self.resources) do
    with self.resources[i] do begin
      IncEx(amount, amount_patch);

      amount_patch := 0;
    end
end

procedure TStatistics.Initialize()
begin
  with actionBar.GetBounds() do begin
    self.bounds.x1 := 0;
    self.bounds.x2 := x2;
    self.bounds.y1 := 0;
    self.bounds.y2 := __smartClientHeight - y1;

    self.canvas.init(Client.GetMBitmaps);
    self.canvas.SetSize(self.bounds.x2 + 1, self.bounds.y2 + 1);

    self.canvas.Rectangle(self.bounds, $385385);
    self.canvas.Rectangle([0, 0, self.bounds.x2, 33], $21314e);
    self.canvas.DrawText(
      'SuperUser''s Karamja Fisher v' + VERSION, Point(4, 2), BigChars, false, clWhite
    );

    with self.canvas_location do begin
      x := 0;
      y := y1;
    end
  end
end

procedure TMufasaBitmap.Print(
  const s: string;
  col,
  row: integer;
  color: TColor = clWhite;
  col_offset: integer = 100
)
begin
  if col = 1 then
    col_offset := 110;

  self.DrawClippedText(
    s,
    [4 + col * col_offset, 42 + row * 15],
    'smallChars',
    true,
    color
  );
end

procedure TStatistics.Update()
var
  b: TMufasaBitmap;
  tr, i: longint;
begin
  self.UpdatePatch();

  b := GetMufasaBitmap(CopyBitmap(self.canvas.getIndex()));
  tr := GetTimeRunning();

  // First column.

  b.Print('Time running', 0, 0);
  b.Print(MSToTime(tr, TIME_BARE), 1, 0, clYellow);

  b.Print('Xp gained', 0, 1);
  b.Print(Format('%.0f', [self.GetXp()]), 1, 1, clYellow);

  b.Print('XP/h', 0, 2);
  b.Print(
    Format('%.0f', [((0.0 + self.GetXp()) / tr) * 3600000.0]), 1, 2, clYellow
  );

  // Second column.

  for i := 0 to High(self.resources) do
    with self.resources[i] do begin
      b.Print(name, 2, i);
      b.Print(
        Format(
          '%d (%.0f/h)', [GetTotal(), ((0.0 + GetTotal()) / tr) * 3600000.0]
        ),
        3,
        i,
        clYellow
      );
    end

  b.Print('Total fish', 2, Length(self.resources));
  b.Print(
    Format(
      '%d (%.0f/h)', [
        GetTotalResources(),
        ((0.0 + GetTotalResources()) / tr) * 3600000.0
      ]
    ),
    3,
    Length(self.resources),
    clYellow
  );

  smartImage.drawBitmap(b.getIndex(), self.canvas_location);

  b.Free();
end

procedure SUSSetup()
begin
  AddOnTerminate('SUSUninitialize');
end

procedure SUSUninitialize()
var
  i: integer;
begin
  for i := 0 to High(__surface_objects) do
    FreeMem(__surface_objects[i]);
end

function SurfaceFilterClosest(
  const atpa: T2DPointArray;
  const p_: TPoint;
  out index: integer
): TPoint
var
  i: integer;
  p: TPoint;
  c, ch: extended;
begin
  ch := $ffff;

  for i := 0 to High(atpa) do begin
    p := MiddleTPA(atpa[i]);
    c := Sqrt(Sqr(Abs(p_.x - p.x)) + Sqr(Abs(p_.y - p.y)));

    if c < ch then begin
      ch := c;
      result := p;
      index := i;
    end
  end
end

function SUSAddObject(
  const name: string;
  filter: TSurfacePartFilterFunc = @SurfaceFilterClosest
): ^TSurfaceObject
begin
  result := __surface_objects.Create(name, @filter);
end

function TSurfaceObjectArray.Create(
  const _name: string;
  _filter: TSurfacePartFilterFunc = @SurfaceFilterClosest
): ^TSurfaceObject
begin
  SetLength(self, Length(self) + 1);

  New(result);

  with result^ do begin
    name := _name;
    filter := @_filter;
  end

  self[High(self)] := result;
end

function TBox.FindColorsTPA(
  const tcs: TColorSettings;
  d, c, t: integer
): TPointArray
var
  tpa: TPointArray;
begin
  FindColorsTolerance(tpa, c, self, t, tcs);

  result := RemoveDistTPointArray(
    mainscreen.playerPoint.x,
    mainscreen.playerPoint.y,
    d,
    RemoveDistTPointArray(
      mainscreen.playerPoint.x, mainscreen.playerPoint.y, 10, tpa, false
    ),
    true
  );
end

function TPointArray.AssertBoxSize(const size: TBox): boolean
begin
  result := true;

  with GetTPABounds(self) do
    if (x2 - x1 < size.x1) or
       (x2 - x1 > size.x2) or
       (y2 - y1 < size.y1) or
       (y2 - y1 > size.y2) then
      result := false;
end

procedure T2DPointArray.DeleteIndex(index: integer)
var
  i: integer;
begin
  for i := index to High(self) - 1 do
    self[i] := self[i + 1];

  SetLength(self, Length(self) - 1);
end

function TSurfacePart.Find(
  const b: TBox;
  const f: TSurfacePartFilterFunc = @SurfaceFilterClosest
): boolean
var
  atpa, atpa_: T2DPointArray;
  i: integer;
begin
  result := false;
  atpa := SplitTPAEx(
    b.FindColorsTPA(
      self.color_settings,
      self.max_distance,
      self.color,
      self.color_tolerance
    ),
    self.step,
    self.step // TODO: Individual x/y -steps.
  );

  for i := 0 to High(atpa) do begin
    if atpa[i].AssertBoxSize(self.size) and
      (Length(atpa[i]) > self.min_pixel_count) then begin
      SetLength(atpa_, Length(atpa_) + 1);

      atpa_[High(atpa_)] := CopyTPA(atpa[i]);
    end else begin
      {$ifdef DEBUG_SURFACES}
      smartImage.drawBox(atpa[i].GetBounds(), clRed);
      {$endif}
    end
  end

  if Length(atpa_) > 0 then begin
    SetLength(self.base_atpa, 0);

    self.base_atpa := CopyATPA(atpa_);
    result := true;
  end
end

function TSurfacePartArray.Create(const csp: TSurfacePart = []): ^TSurfacePart
begin
  SetLength(self, Length(self) + 1);

  New(result);

  with result^ do begin
    base_atpa := csp.base_atpa;
    bounds := csp.bounds;
    color := csp.color;
    color_settings := csp.color_settings;
    color_tolerance := csp.color_tolerance;
    max_distance := csp.max_distance;
    min_pixel_count := csp.min_pixel_count;
    size := csp.size;
    step := csp.step;
    anti := csp.anti;
  end

  self[High(self)] := result;
end

function TSurfacePart.SetMinPixelCount(
  pixel_count: integer
): ^TSurfacePart
begin
  self.min_pixel_count := pixel_count;

  result := @self;
end

function TSurfacePart.SetAnti(
  _anti: boolean = true
): ^TSurfacePart
begin
  self.anti := _anti;

  result := @self;
end

function TSurfacePart.SetStep(
  _step: integer
): ^TSurfacePart
begin
  self.step := _step;

  result := @self;
end

function TSurfacePart.SetMaxDistance(
  distance: integer
): ^TSurfacePart
begin
  self.max_distance := distance;

  result := @self;
end

function TSurfacePart.SetSize(
  _size: TBox
): ^TSurfacePart
begin
  self.size := _size;

  result := @self;
end

function TSurfacePart.SetColorData(
  _cts,
  _color,
  _tolerance: integer;
  _hue,
  _saturation,
  _sensitivity: extended = 0.0
): ^TSurfacePart
begin
  self.color := _color;
  self.color_tolerance := _tolerance;
  self.color_settings.cts := _cts;
  self.color_settings.modifier.hue := _hue;
  self.color_settings.modifier.saturation := _saturation;
  self.color_settings.modifier.sensitivity := _sensitivity;

  result := @self;
end

function TSurfaceObject.CreatePart(): ^TSurfacePart
begin
  result := self.parts.Create();
end

function TSurfaceObject.Point(): TPoint
begin
  result := self.bounds.GetMiddle();
end

function TSurfaceObject.Find(
  const area: TBox;
  const f: TSurfacePartFilterFunc = nil
): boolean
var
  many_parts, b: boolean;
  i, k, j, mp: integer;
  o: TSurfacePartFilterFunc;
begin
  many_parts := Length(self.parts) > 1;
  result := true;
  mp := 0;

  if @f <> nil then begin
    o := @self.filter;
    self.filter := @f;
  end

  {$ifdef DEBUG_SURFACES}

  smartImage.clear();

  {$endif}

  for i := 0 to High(self.parts) do begin
    if i = 0 then
      result := self.parts[0]^.Find(area, @self.filter)
    else begin
      if not result then begin
        if @f <> nil then
          self.filter := @o;

        Exit();
      end

      if many_parts then begin
        k := High(self.parts[0]^.base_atpa);

        for j := 0 to k do begin
          {$ifdef DEBUG_SURFACES}

          smartImage.drawBox(self.parts[0]^.base_atpa[j].GetBounds(), clRed);

          {$endif}

          b := self.parts[i]^.Find(
            GetTPABounds(self.parts[0]^.base_atpa[j]),
            @self.filter
          );

          if self.parts[i]^.anti then
            b := not b

          if not b then begin
            // Remove from potential hits.
            self.parts[0]^.base_atpa.DeleteIndex(j);

            Dec(k);
            Dec(j);
          end
        end
      end
    end
  end

  if Length(self.parts[0]^.base_atpa) = 0 then begin
    if @f <> nil then
      self.filter := @o;

    Exit(false);
  end

  self.filter(self.parts[0]^.base_atpa, mainscreen.playerPoint, i);

  self.bounds := GetTPABounds(self.parts[0]^.base_atpa[i]);

  SetLength(self.hits, Length(self.parts[0]^.base_atpa));

  for i := 0 to High(self.hits) do begin
    {$ifdef DEBUG_SURFACES}

    smartImage.drawBox(self.parts[0]^.base_atpa[i].GetBounds(), clYellow);

    {$endif}

    self.hits[i] := self.parts[0]^.base_atpa[i].GetBounds();
  end

  SetLength(self.parts[0]^.base_atpa, 0);

  if @f <> nil then
    self.filter := @o;
end

function SUSGetObject(const name: string): ^TSurfaceObject
var
  i: integer;
begin
  result := nil;

  for i := 0 to High(__surface_objects) do
    if __surface_objects[i]^.name = name then
      Exit(__surface_objects[i]);
end

function MouseRandom(const p: TPoint; mouse_action: integer): TPoint
var
  mouse_style: array [0..2] of integer;
  x, y: integer;
begin
  mouse_style := [MOUSE_BREAK, MOUSE_ACCURATE, MOUSE_HUMAN];
  mouseSpeed := RandomRange(30, 38);

  if (mouse_action = MOUSE_MOVE) then
    MissMouse(p, true)
  else
    Mouse(p, mouse_action, mouse_style[Random(2)]);

  GetMousePos(x, y);

  result := TPoint([x, y]);
end

function TSurfaceObject.Click(
  tries: integer = 5;
  click_type: integer = MOUSE_LEFT;
  text: string = '';
  rotate: boolean = false;
  backup_right: boolean = false;
  search_all: boolean = false
): boolean
var
  c, i, x, y: integer = 0;
begin
  result := false;

  if tries = 0 then
    Exit();

  if self.Find(mainscreen.GetBounds()) then begin
    if search_all then
      c := High(self.hits);

    if text = '' then
      text := self.name;

    for i := 0 to c do begin
      MouseRandom(hits[i].GetMiddle(), MOUSE_MOVE);

      if (click_type = MOUSE_LEFT) and IsMouseOverText(
        [text], RandomRange(800, 1000)
      ) then begin
        FastClick(MOUSE_LEFT);

        result := true;
      end else if (backup_right) or (click_type = MOUSE_RIGHT) then begin
        FastClick(MOUSE_RIGHT);

        result := chooseOption.Select([text]);
      end

      if result then begin
        GetMousePos(x, y);
        MouseCircle(x, y, Random(100));

        minimap.WaitPlayerMoving();

        break;
      end
    end
  end

  if not result and rotate then begin
    minimap.setAngle(Random(360));

    Exit(self.Click(tries - 1, click_type, text, rotate, backup_right, search_all));
  end
end

procedure TPlayer.Configure(const message: string = '')
begin
  disableSRLDebug := not self.booleans[0];

  if not self.Login() then begin
    WriteLn(message);

    TerminateScript();
  end

  minimap.clickCompass();
  mainscreen.setAngle(MS_ANGLE_HIGH);

  if self.strings[1] = 'Lobster' then
    fish_str := 'age'
  else
    fish_str := 'arp';
end

procedure AssertSPSMap(path, url, name, _sha1: string)
var
  map, data: string;
  fh: LongInt;
begin
  map := AppPath + path + '/' + name + '.png';

  if FileExists(map) then begin
    fh := OpenFile(map, false);
    ReadFileString(fh, data, FileSize(fh));
    CloseFile(fh);

    if Sha1(data) = _sha1 then
      Exit();
  end

  CloseFile(CreateFile(map));

  fh := ReWriteFile(map, false);
  data := GetPage(url + '/' + name + '.png');

  if data = '' then begin
    MessageBox('Cannot download SPS-map. Please make sure you have OpenSSL in' +
      'stalled on your system', 'Error', 0);

    TerminateScript();
  end

  WriteFileString(fh, data);
  CloseFile(fh);
end

procedure Updater()
var
  version_remote, source, s: string;
  fh: LongInt;
  i: integer;
begin
  version_remote := GetPage(
    'https://raw.githubusercontent.com/SRLSuperUser/superusers-karamja-fisher' +
    '/master/version'
  );

  if version_remote = '' then begin
    MessageBox('Cannot self-update. Please make sure you have OpenSSL insta' +
      'lled on your system', 'Error', 0);

    TerminateScript();
  end

  if not (VERSION = version_remote) then begin
    source := GetPage(
      'https://raw.githubusercontent.com/SRLSuperUser/superusers-karamja-fish' +
      'er/master/superusers-karamja-fisher.simba'
    );

    try
      fh := ReWritefile(ScriptPath + 'superusers-karamja-fisher.simba', true);

      WriteFileString(fh, source);
    except
      MessageBox('An error occurred while trying to update!', 'Error', 0);
    finally
      CloseFile(fh);
    end
  end
end

procedure Initialize()
var
  i: integer;
begin
  Updater();
  ClearDebug();

  disableSRLDebug := true;
  currentPlayer := 0;
  smartPlugins := ['d3d9.dll'];
  smartEnableDrawing := true;

  with playerform do begin
    name := 'SuperUser''s Karamja Fisher';
    scriptHelpThread := 'https://villavu.com/forum/showthread.php?t=110289';
    scriptSettingsPath := AppPath + 'Scripts/superusers-karamja-fisher.txt';

    comboBoxLabels := ['Fish type'];
    comboBoxDefaults := ['Lobster'];
    comboBoxItems := [['Lobster', 'Tuna / Swordfish']];

    checkBoxLabels := ['Show SRL debug'];
    checkBoxDefaults := ['false'];
  end

  RunPlayerForm();

  players.setup(playerForm.playerNames, playerForm.playerFile);

  SetupSRL();

  for i := 0 to high(players) do
    with players[i] do begin
      booleans[0] := StrToBool(
        playerForm.players[i].settings[0]
      );

      strings[1] := playerForm.players[i].settings[1]; // Fish type
    end

  currentPlayer := 0;

  players[currentPlayer].isActive := true;
  players[currentPlayer].Configure();

  SUSSetup();

  with SUSAddObject('Fishing spot')^ do begin
    CreatePart()
      ^.SetColorData(3, 11968916, 25, 0.0, 0.0, 0.95)
      ^.SetSize([2, 2, 155, 155])
      ^.SetMaxDistance(200)
      ^.SetStep(6)
      ^.SetAnti(false)
      ^.SetMinPixelCount(6);

    CreatePart()
      ^.SetColorData(2, 4992334, 11, 2.18, 0.36)
      ^.SetSize([2, 2, 155, 155])
      ^.SetMaxDistance(200)
      ^.SetStep(6)
      ^.SetAnti(false)
      ^.SetMinPixelCount(6);
  end

  with SUSAddObject('Stiles')^ do begin
    CreatePart()
      ^.SetColorData(2, 10066856, 13, 0.26, 0.37)
      ^.SetSize([3, 3, 65, 65])
      ^.SetMaxDistance(200)
      ^.SetStep(12)
      ^.SetAnti(false)
      ^.SetMinPixelCount(10);

    CreatePart()
      ^.SetColorData(3, 3421753, 12, 0.0, 0.0, 0.50)
      ^.SetSize([2, 2, 65, 65])
      ^.SetMaxDistance(200)
      ^.SetStep(10)
      ^.SetAnti(false)
      ^.SetMinPixelCount(5);
  end

  AssertSPSMap(
    'Includes/SPS/img',
    'https://raw.githubusercontent.com/SRLSuperUser/superusers-karamja-fisher' +
    '/master/resources/sps',
    'su-kf-karamja',
    'CEACADD2B5FCEDFF5AB648DC6CE505540F706EB4'
  );

  karamja.setup(
    'su-kf-karamja',
    '',
    4,
    600,
    0.3
  );

  SetLength(walking_paths, 3);

  walking_paths[0] := [
    Point(414, 79), Point(348, 100), Point(284, 122), Point(219, 148),
    Point(161, 181), Point(115, 218)
  ];

  walking_paths[1] := [
    Point(415, 82), Point(359, 99), Point(320, 136), Point(259, 165),
    Point(216, 188), Point(170, 200), Point(143, 212), Point(122, 217)
  ];

  walking_paths[2] := [
    Point(415, 84), Point(385, 97), Point(325, 107), Point(269, 127),
    Point(222, 154), Point(179, 192), Point(129, 214)
  ];

  statistics.AddResource('Swordfish', 100.0, DTMFromString('mlwAAAHicY2dgYNjN' +
    'wsCwA4g3A/ExIN4HxNuA+AgQpzIxMGQAcT4QFwBxIRCXAXElEDMwMOHBFAEAF64IcA=='));

  statistics.AddResource('Tuna', 80.0, DTMFromString('mrAAAAHic42BgYHBjZmBwBm' +
    'IfIA4E4mAgtgNidyAOAOIgJgaGUCAOYYKwY6A4AojjgZiBgYkApg4AANCaBUs='));

  statistics.AddResource('Lobster', 90.0, DTMFromString('mrAAAAHic42BgYNjOxMC' +
    'wGYiXA/ECIN4LxFuh/G1A3M/IwDANiKcD8SwgngyllwPxIiBmYGAigKkDAK+nCn0='));

  statistics.Initialize();
  statistics.Update();
end

procedure Uninitialize()
var
  i: integer;
begin
  for i := 0 to High(statistics.resources) do
    if statistics.resources[i].dtm > -1 then
      FreeDTM(statistics.resources[i].dtm);
end

procedure Die(const message: string = '')
begin
  if not IsLoggedIn() then
    players[currentPlayer].Configure(message);
end

procedure Walk(invert: boolean = false)
var
  path: TPointArray;
  i: integer;
begin
  path := walking_paths[Random(Length(walking_paths))].Copy();

  if invert then
    path.Invert();

  i := 0;

  repeat
    if not karamja.WalkPath(path) then begin
      Inc(i);

      if i > 3 then
        Die('For some reason, cannot walk..');

      Wait(RandomRange(1000, 3000));
    end else
      break;
  until false;
end

{**
 * I find it weird this doesn't exist in Simba/SRL-6..
 *
 *}
function TIntegerArray.StdDev(): extended
var
  avg, total: extended;
  i: integer;
begin
  for i := 0 to High(self) do
    total := total + self[i];

  avg := total / Length(self);
  total := 0;

  for i := 0 to High(self) do
    total := total + Pow(self[i] - avg, 2);

  result := Sqrt(total / Length(self));
end

{**
 * Check whether the player is currently fishing.
 * Uses standard deviation with two sigma-confidence.
 *}
function IsFishing(sigmas: integer = 2): boolean
var
  c, i: integer;
  ia: TIntegerArray;
  e: extended;
begin
  if not IsLoggedIn() then
    Exit(false);

  try
    SetLength(ia, 10);
    Dec(sigmas);

    c := tabBackpack.Count();
    result := false;

    for i := 0 to High(ia) do begin
      if tabBackpack.IsFull() then
        Exit(false);

      if c <> tabBackpack.Count() then
        Exit(true);

      ia[i] := GetPixelShiftAverage(IntToBox(282, 188, 288, 196), 25, 100);
    end

    e := ia.StdDev();

    if (e < 8) and (sigmas > 0) then
      result := IsFishing(sigmas)
    else
      result := e > 8;
  finally
    statistics.Update();
  end
end

procedure NoteFish(tries: integer = 5)
var
  c: integer;
  t: TTimeMarker;
begin
  if tries = 0 then
    Die('Cannot note fish');

  Walk();

  c := tabBackpack.Count();

  statistics.Commit();

  if SUSGetObject('Stiles')^.Click(
    10,
    MOUSE_RIGHT,
    'xch',
    true,
    true
  ) then begin
    t.Start();

    repeat
      Wait(RandomRange(33, 66));

      if t.GetTime() > 10000 then begin
        NoteFish(tries - 1);

        Exit();
      end
    until c <> tabBackpack.Count();
  end else begin
    NoteFish(tries - 1);

    Exit();
  end

  Walk(true);
end

procedure AntiBan();
begin
  if (not IsLoggedIn()) then
    Exit();

  case Random(600) of
    1: HoverSkill(SKILL_FISHING);
    3: SmallRandomMouse();
    4: RandomRClickItem();
    6: begin
      boredHuman();

      mainscreen.SetAngle(MS_ANGLE_HIGH);
    end
    10..30: minimap.SetAngle(Random(360));
    31..80: MouseRandom(mainscreen.GetBounds().GetRandomPoint(), MOUSE_MOVE);
  end;
end;

procedure DropJunkFish()
var
  shrimp_etc, I: integer;
  pa: TPointArray;
begin
  shrimp_etc := DTMFromString('mlwAAAHicY2dgYFjExMAwH4jnAfFKIN4JxDuAeD0QT2VkY' +
    'JgBxLOg9DQgXgjES4CYgYEJD6YIAABJfgkN');

  with tabBackpack.getBounds() do
    FindDTMs(shrimp_etc, pa, x1, y1, x2, y2);

  for i := 0 to High(pa) do begin
    MouseRandom(pa[i], MOUSE_RIGHT);

    chooseOption.Select(['rop Raw'], 1, 2000);

    Wait(RandomRange(50, 250));
  end

  FreeDtm(shrimp_etc);
end

begin
  Initialize();

  repeat
    repeat
      DropJunkFish();

      if tabBackpack.Count() = 28 then
        NoteFish()
      else
        Walk(true);

      while (tabBackpack.Count() < 28) and IsLoggedIn() do begin
        if SUSGetObject('Fishing spot')^.Click(
          20,
          MOUSE_LEFT,
          fish_str,
          true,
          fish_str = 'arp',
          true
        ) then begin
          Wait(1000 + Random(1000));

          while IsFishing() do begin
            Wait(RandomRange(30, 60));

            AntiBan();
          end
        end
      end
    until not IsLoggedIn();

    players[currentPlayer].Configure();
  until false;
end.
